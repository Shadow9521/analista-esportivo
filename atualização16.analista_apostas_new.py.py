
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from io import BytesIO
from PIL import Image
import base64

# Fun√ß√µes auxiliares
def calcular_odds(prob):
    return round(1 / (prob / 100), 2) if prob > 0 else float('inf')

def kelly_formula(p, b):
    return max(((p * (b + 1) - 1) / b), 0)

def export_df_to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Analise')
    return output.getvalue()

def get_base64_image(image_path):
    with open(image_path, "rb") as img_file:
        return base64.b64encode(img_file.read()).decode()

# Configura√ß√£o inicial
st.set_page_config(page_title="Analista Esportivo Inteligente", layout="wide")

# üîª Cabe√ßalho com imagem de fundo
background_image_base64 = get_base64_image("ChatGPTima.png")
st.markdown(
    f"""
    <style>
    .custom-header {{
        background-image: url(data:image/png;base64,{background_image_base64});
        background-size: cover;
        background-position: center;
        padding: 30px;
        border-radius: 10px;
        color: white;
        margin-bottom: 30px;
    }}
    .custom-header h1 {{
        font-size: 2.5em;
        margin-bottom: 0.5em;
    }}
    .custom-header p {{
        font-size: 1.2em;
        margin: 0;
    }}
    </style>

    <div class="custom-header">
        <h1>‚öΩ Analista Esportivo Inteligente</h1>
        <p>Preencha os dados abaixo para come√ßar a an√°lise:</p>
    </div>
    """,
    unsafe_allow_html=True
)

# üîª Entrada manual dos times e odds
col_titulo, col_banca = st.columns([5, 1])
with col_titulo:
    col_a, col_b, col_c = st.columns(3)
    with col_a:
        time_casa = st.text_input("Time da Casa", "Brasil")
    with col_b:
        time_empate = st.text_input("Empate", "Empate", disabled=True)
    with col_c:
        time_fora = st.text_input("Time Visitante", "Argentina")

    col_d, col_e, col_f = st.columns(3)
    with col_d:
        odd_vitoria = st.number_input("Odd Vit√≥ria (Casa)", value=1.80, step=0.01)
    with col_e:
        odd_empate = st.number_input("Odd Empate", value=3.20, step=0.01)
    with col_f:
        odd_derrota = st.number_input("Odd Vit√≥ria (Visitante)", value=4.00, step=0.01)

with col_banca:
    st.markdown("#### üíº Banca")
    banca = st.number_input("", value=100.0, step=10.0, label_visibility="collapsed")
    st.markdown("<small>Saldo da Banca (R$)</small>", unsafe_allow_html=True)

# üîª Checklist de An√°lise
fatores = [
    ("Quem tem o melhor goleiro?", 3),
    ("Quem tem os melhores zagueiros?", 3),
    ("Quem tem os melhores laterais?", 2),
    ("Quem tem os melhores volantes?", 2),
    ("Quem tem os melhores meias e atacantes?", 3),
    ("Quem tem jogadores mais habilidosos?", 2),
    ("Quem tem jogadores mais disciplinados taticamente?", 2),
    ("Quem joga em liga mais competitiva?", 3),
    ("Quem tem melhor t√©cnico?", 3),
    ("Quem tem melhor ataque?", 4),
    ("Quem tem melhor defesa?", 4),
    ("Quem tem mais posse de bola durante os jogos?", 2),
    ("Quem tem mais camisa/tradi√ß√£o?", 2),
    ("Quem fez mais investimento no elenco?", 2),
    ("Quem joga em casa?", 3),
    ("Quem vem melhor nos √∫ltimos 5 jogos?", 4),
    ("√â jogo de mata-mata, classifica√ß√£o ou lideran√ßa?", 2),
    ("Pode chover durante o jogo?", 1),
    ("O gramado √© bom ou ruim?", 1)
]

st.subheader(f"‚úÖ CHECKLIST DE AN√ÅLISE DO JOGO: {time_casa} x {time_fora}")
st.markdown("### üß† Responda cada crit√©rio de forma interativa:")

if 'etapa' not in st.session_state:
    st.session_state.etapa = 0
if 'respostas' not in st.session_state:
    st.session_state.respostas = []

etapa = st.session_state.etapa
respostas = st.session_state.respostas

if etapa < len(fatores):
    pergunta, peso = fatores[etapa]
    st.markdown(f"**{etapa + 1}/{len(fatores)}** - {pergunta}")
    escolha = st.radio("Quem leva vantagem?", ["Nenhum", time_casa, time_fora], key=pergunta)
    if st.button("Pr√≥xima"):
        if escolha == time_casa:
            respostas.append((peso, f"‚¨ÜÔ∏è {pergunta} ‚Üí {time_casa} (+{peso}%)"))
        elif escolha == time_fora:
            respostas.append((-peso, f"‚¨áÔ∏è {pergunta} ‚Üí {time_fora} (+{peso}%)"))
        else:
            respostas.append((0, f"‚öñÔ∏è {pergunta} ‚Üí Nenhuma vantagem (0%)"))
        st.session_state.etapa += 1
        st.session_state.respostas = respostas
    st.progress(etapa / len(fatores))
else:
    probabilidade_base = 50 + sum([r[0] for r in respostas])
    vitoria = min(90, max(10, probabilidade_base))
    empate = 100 - vitoria - 20
    derrota = 100 - vitoria - empate

    st.markdown("### üßÆ Constru√ß√£o da Probabilidade Estimada")
    for _, c in respostas:
        st.markdown(f"- {c}")

    saldo_time_casa = sum([r[0] for r, c in zip(respostas, fatores) if '‚¨ÜÔ∏è' in c])
    saldo_time_fora = sum([-r[0] for r, c in zip(respostas, fatores) if '‚¨áÔ∏è' in c])

    st.markdown(f"**üìä Saldo de Vantagem:** {time_casa}: {saldo_time_casa}% | {time_fora}: {saldo_time_fora}%**")
    st.markdown(f"**üéØ Probabilidade final estimada de vit√≥ria do {time_casa}: {vitoria}%**")

    odds_justas = {
        "Vit√≥ria": calcular_odds(vitoria),
        "Empate": calcular_odds(empate),
        "Derrota": calcular_odds(derrota)
    }

    st.subheader("üìä Probabilidades e Odds Justas")
    df_prob = pd.DataFrame({
        "Resultado": [
            f"Vit√≥ria {time_casa} üè†",
            "Empate ü§ù",
            f"Vit√≥ria {time_fora} üõ´"
        ],
        "Probabilidade (%)": [vitoria, empate, derrota],
        "Odd Justa": [odds_justas["Vit√≥ria"], odds_justas["Empate"], odds_justas["Derrota"]],
        "Odd Mercado": [odd_vitoria, odd_empate, odd_derrota]
    })
    st.dataframe(df_prob, use_container_width=True)

    fig = px.pie(df_prob, names='Resultado', values='Probabilidade (%)', title='Distribui√ß√£o de Probabilidades')
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("‚öôÔ∏è Valor Esperado e Stake Kelly (Vit√≥ria)")
    valor_esperado = (vitoria / 100) * odd_vitoria - 1
    kelly = kelly_formula(vitoria / 100, odd_vitoria - 1)
    stake_kelly = banca * kelly

    col1, col2, col3 = st.columns(3)
    col1.metric(label="Valor Esperado (EV)", value=f"{valor_esperado:.2f}")
    col2.metric(label="Stake Kelly (%)", value=f"{kelly * 100:.1f}%")
    col3.metric(label="Stake R$", value=f"R$ {stake_kelly:.2f}")

    if valor_esperado > 0:
        st.success("‚úÖ Aposta com valor positivo. Pode valer a pena apostar.")
    elif valor_esperado == 0:
        st.info("‚ö†Ô∏è Aposta neutra. Sem valor esperado.")
    else:
        st.warning("‚ùå Aposta com valor negativo. Evite apostar.")

    st.subheader("üì• Exportar Dados")
    excel_data = export_df_to_excel(df_prob)
    st.download_button(label="üìÑ Baixar Tabela em Excel", data=excel_data, file_name="analise_apostas.xlsx")

    st.subheader("üìù Anota√ß√µes do Analista")
    comentarios = st.text_area("Coment√°rios, observa√ß√µes ou insights sobre este jogo:", height=150)

    st.markdown("---")
    col_restart, col_express = st.columns(2)
    with col_restart:
        if st.button("üîÅ Reiniciar Checklist"):
            st.session_state.etapa = 0
            st.session_state.respostas = []
            st.experimental_rerun()
    with col_express:
        if st.button("‚ö° Modo R√°pido (5 perguntas)"):
            fatores = fatores[:5]
            st.session_state.etapa = 0
            st.session_state.respostas = []
            st.experimental_rerun()
